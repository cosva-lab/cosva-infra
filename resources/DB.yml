Resources:
  # Info about this resource below
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-secretsmanager-secrettargetattachment.html
  ClusterSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: ${self:provider.stackName}-db-secret
      Description: 'This is the Master secret for the RDS Aurora cluster'
      GenerateSecretString:
        SecretStringTemplate: '{"username": "cosva"}'
        GenerateStringKey: 'password'
        PasswordLength: 16
        ExcludeCharacters: '"@/\'

  LightSailDB:
    Type: AWS::Lightsail::Database
    Properties:
      AvailabilityZone: ${self:provider.region}a
      MasterUsername:
        !Join [
          '',
          [
            '{{resolve:secretsmanager:',
            !Ref ClusterSecret,
            ':SecretString:username}}',
          ],
        ]
      MasterUserPassword:
        !Join [
          '',
          [
            '{{resolve:secretsmanager:',
            !Ref ClusterSecret,
            ':SecretString:password}}',
          ],
        ]
      RelationalDatabaseBlueprintId: postgres_15
      RelationalDatabaseBundleId: micro_2_0
      RelationalDatabaseName: ${self:custom.databaseName}
      MasterDatabaseName: ${self:custom.databaseName}
      BackupRetention: true
      Tags:
        - Key: Name
          Value: ${self:provider.stackName}

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - lightsail:GetRelationalDatabase
                Resource: '*'

  GetLightsailDatabaseEndpointFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      FunctionName: getLightSailDatabaseEndpoint
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs16.x
      Timeout: 30
      Code:
        ZipFile: |
          /* Copyright 2015 Amazon Web Services, Inc. or its affiliates. All Rights Reserved.
            This file is licensed to you under the AWS Customer Agreement (the "License").
            You may not use this file except in compliance with the License.
            A copy of the License is located at http://aws.amazon.com/agreement/ .
            This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or implied.
            See the License for the specific language governing permissions and limitations under the License. */

          const SUCCESS = "SUCCESS";
          const FAILED = "FAILED";

          const send = function(event, context, responseStatus, responseData, physicalResourceId, noEcho) {
              var responseBody = JSON.stringify({
                  Status: responseStatus,
                  Reason: "See the details in CloudWatch Log Stream: " + context.logStreamName,
                  PhysicalResourceId: physicalResourceId || context.logStreamName,
                  StackId: event.StackId,
                  RequestId: event.RequestId,
                  LogicalResourceId: event.LogicalResourceId,
                  NoEcho: noEcho || false,
                  Data: responseData
              });

              console.log("Response body:\n", responseBody);

              var https = require("https");
              var url = require("url");

              var parsedUrl = url.parse(event.ResponseURL);
              var options = {
                  hostname: parsedUrl.hostname,
                  port: 443,
                  path: parsedUrl.path,
                  method: "PUT",
                  headers: {
                      "content-type": "",
                      "content-length": responseBody.length
                  }
              };

              var request = https.request(options, function(response) {
                  console.log("Status code: " + response.statusCode);
                  console.log("Status message: " + response.statusMessage);
                  context.done();
              });

              request.on("error", function(error) {
                  console.log("send(..) failed executing https.request(..): " + error);
                  context.done();
              });

              request.write(responseBody);
              request.end();
          }
          exports.handler = function(event, context) {
            const input = parseInt(event.ResourceProperties.Input);
            const responseData = { Endpoint: 'https://myendpoint.com' };
            send(event, context, SUCCESS, responseData);
          };

  GetLightsailDatabaseEndpoint:
    Type: 'Custom::GetLightsailDatabaseEndpoint'
    Properties:
      ServiceToken: !GetAtt GetLightsailDatabaseEndpointFunction.Arn
      Region: ${self:provider.region}

Outputs:
  ClusterSecret:
    Description: Secret de la base de datos creada en CloudFormation
    Value: !Ref ClusterSecret

  LightSailDB:
    Description: Base de datos creada en Lightsail
    Value: !Ref LightSailDB

  LightSailDBEndpoint:
    Description: Endpoint de la base de datos creada en Lightsail
    Value: !GetAtt GetLightsailDatabaseEndpoint.Endpoint
