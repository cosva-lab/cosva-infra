AWSTemplateFormatVersion: '2010-09-09'

Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Sub '10.0.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: ${self:provider.stackName}-VPC

  NATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref SubnetAPublic

  SubnetAPrivate:
    DependsOn: VPC
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Sub '10.0.0.0/24'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join
            - '_'
            - - ${self:provider.stackName}
              - 'Private_SubnetA'
        - Key: Reach
          Value: private

  SubnetARouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join
            - '_'
            - - ${self:provider.stackName}
              - 'Private_SubnetA_RouteTable'

  SubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref SubnetARouteTable
      SubnetId: !Ref SubnetAPrivate

  SubnetBPrivate:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Sub '10.0.1.0/24'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join
            - '_'
            - - ${self:provider.stackName}
              - 'Private_SubnetB'
        - Key: Reach
          Value: private

  SubnetBRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join
            - '_'
            - - ${self:provider.stackName}
              - 'Private_SubnetB_RouteTable'

  SubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref SubnetBRouteTable
      SubnetId: !Ref SubnetBPrivate

  SubnetAPublic:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Sub '10.0.2.0/24'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join
            - '_'
            - - ${self:provider.stackName}
              - 'Public_SubnetA'
        - Key: Reach
          Value: public

  SubnetRouteTableAssociationLambdaPublicA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DefaultPublicRouteTable
      SubnetId: !Ref SubnetAPublic

  DefaultPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join
            - '_'
            - - ${self:provider.stackName}
              - 'Public_RouteTable'

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: DefaultPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway

  NetworkAclPrivate:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join
            - '_'
            - - ${self:provider.stackName}
              - 'Private_ACL'

  SubnetNetworkAclAssociationAPrivate:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetAPrivate
      NetworkAclId: !Ref NetworkAclPrivate

  SubnetNetworkAclAssociationBPrivate:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetBPrivate
      NetworkAclId: !Ref NetworkAclPrivate

  NetworkAclEntryInPrivateAllowVPC:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'

  NetworkAclEntryOutPrivateAllowVPC:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Join
            - '_'
            - - ${self:provider.stackName}
              - 'InternetGateway'

  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  RouteTableInternetGateway:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref SubnetARouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGateway

  RouteTableInternetGatewayB:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref SubnetBRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGateway

Outputs:
  VPC:
    Description: VPC creada en CloudFormation
    Value: !Ref VPC
  SubnetAPrivate:
    Description: Subred privada A creada en CloudFormation
    Value: !Ref SubnetAPrivate
  SubnetBPrivate:
    Description: Subred privada B creada en CloudFormation
    Value: !Ref SubnetBPrivate
