service: cosva-infra
Description: Infrastructure for the COSVA project

custom:
  stage: ${opt:stage, 'dev'}
  region:
    prod: us-east-1
    default: us-east-1
  logRetention:
    prod: 180
    default: 14
  DatabaseName: 'cosva${self:custom.stage}'
  DBClusterIdentifier: ${self:custom.stage}-${self:service}
  DBUpdateReplacePolicy:
    dev: Delete
    prod: Retain
  DBDeletionPolicy:
    dev: Delete
    prod: Retain
  DBBackupRetentionPeriod:
    dev: 7
    prod: 35
  DBDeletionProtection:
    dev: false
    prod: true
  DBAutoPause:
    default: true
  DBSecondsUntilAutoPause:
    dev: 300
    prod: 6000
  DBMinCapacity:
    dev: 2
    prod: 2
  DBMaxCapacity:
    dev: 2
    prod: 2
  DBClusterARN:
    Fn::Join:
      - ':'
      - - 'arn:aws:rds'
        - Ref: 'AWS::Region'
        - Ref: 'AWS::AccountId'
        - 'cluster'
        - !Ref AuroraDBCluster

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${self:custom.stage}
  region: ${opt:region, 'us-east-1'}
  stackName: ${self:service}-${self:custom.stage}
  stackTags:
    STAGE: ${self:custom.stage}
  logs:
    restApi: true
  logRetentionInDays: ${self:custom.logRetention.${self:custom.stage}, self:custom.logRetention.default}

package:
  exclude:
    - node_modules/**
    - set_env_vars.sh
    - package.json
    - package-lock.json
    - README.md

resources:
  - ${file(resources/stackinfo.yml)}
  # VPC
  - ${file(resources/vpc/vpc.yml)}
  # RDS Aurora Serverless
  - ${file(resources/rds/AuroraRDSServerless.yml)}
  # Log Groups
  - ${file(resources/loggroups/LogGroups.yml)}
